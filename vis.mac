# Define Geometry
# ---------------

/Geometry/HPGeDetector_0/enable
/Geometry/HPGeDetector_0/position 0 0 25.4 cm

/Geometry/HPGeDetector_1/enable
/Geometry/HPGeDetector_1/rotateY 55 deg
/Geometry/HPGeDetector_1/position 20.81 0 14.62 cm

/Geometry/HPGeDetector_2/enable
/Geometry/HPGeDetector_2/rotateY 90 deg
/Geometry/HPGeDetector_2/position 25.4 0 0 cm

/Geometry/HPGeDetector_3/enable
/Geometry/HPGeDetector_3/rotateY 125 deg
/Geometry/HPGeDetector_3/position 20.81 0 -14.62 cm

/Geometry/HPGeDetector_4/enable
/Geometry/HPGeDetector_4/rotateY -30 deg
/Geometry/HPGeDetector_4/position -12.7 0 22.0 cm

/Geometry/TargetChamber/enable
/Geometry/TargetChamber/position 0 0 0 cm

/TargetChamber/setBackingMaterial G4_Mo

# /Geometry/HPGeDetector/setDimension detectorDeadLayerFront 5 mm # large dead layer, for illustration

# Initialize
# ----------

/run/initialize

# Change beam energy
/gun/energy 10 keV


# Visualize
# ---------

# Use these open statements to open selected visualization
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE

# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors

# Draw geometry:
/vis/drawVolume

# Specify view angle:
/vis/viewer/set/viewpointVector 0 1 0
/vis/viewer/set/lightsVector -1 0 0

# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 10

## Draw smooth trajectories at end of event, showing trajectory points
## as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)

## Draw hits at end of event:
#/vis/scene/add/hits

## To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: e+ is blue by default):
#/vis/modeling/trajectories/list
#/vis/modeling/trajectories/drawByParticleID-0/set e+ yellow
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#

# Axes
/vis/scene/add/axes 0 0 0 0.05 m    # Simple axes: x=red, y=green, z=blue.

# To get nice view
/vis/viewer/set/viewpointThetaPhi 90 90

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings

# Temporarily disable volumes
#/vis/geometry/set/visibility worldLog 100 FALSE
#/vis/geometry/set/visibility TargetChamber_target_logical 1 TRUE
#/vis/geometry/set/visibility TargetChamber_backing_logical 1 TRUE

# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
